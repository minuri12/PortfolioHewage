{"ast":null,"code":"var _jsxFileName = \"D:\\\\Portfolio\\\\New\\\\PortfolioHewage\\\\src\\\\Pages\\\\Loading\\\\Loading.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Progressbar from \"../../Components/Progress/Progressbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Loading() {\n  _s();\n  const [progress, setProgress] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setProgress(val => {\n        if (val >= 100) {\n          clearInterval(interval); // Stop when progress reaches 100\n          return val;\n        }\n        return val + 1; // Increment progress\n      });\n    }, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Trigger this when progress completes\n  const handleComplete = () => {\n    // This can be used for any side effects on complete\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(Progressbar, {\n      value: progress,\n      onComplete: handleComplete,\n      showButton: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(Loading, \"ZVQpwjU6Dz5R8VBOzPsnxGRmMVo=\");\n_c = Loading;\nexport default Loading;\nvar _c;\n$RefreshReg$(_c, \"Loading\");","map":{"version":3,"names":["React","useState","useEffect","Progressbar","jsxDEV","_jsxDEV","Loading","_s","progress","setProgress","interval","setInterval","val","clearInterval","handleComplete","className","children","value","onComplete","showButton","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Portfolio/New/PortfolioHewage/src/Pages/Loading/Loading.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Progressbar from \"../../Components/Progress/Progressbar\";\r\n\r\nfunction Loading() {\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setProgress((val) => {\r\n        if (val >= 100) {\r\n          clearInterval(interval); // Stop when progress reaches 100\r\n          return val;\r\n        }\r\n        return val + 1; // Increment progress\r\n      });\r\n    }, 100);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Trigger this when progress completes\r\n  const handleComplete = () => {\r\n    // This can be used for any side effects on complete\r\n  };\r\n\r\n  return (\r\n    <div className=\"progress-wrapper\">\r\n      <Progressbar\r\n        value={progress}\r\n        onComplete={handleComplete}\r\n        showButton={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAE3CC,SAAS,CAAC,MAAM;IACd,MAAMQ,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCF,WAAW,CAAEG,GAAG,IAAK;QACnB,IAAIA,GAAG,IAAI,GAAG,EAAE;UACdC,aAAa,CAACH,QAAQ,CAAC,CAAC,CAAC;UACzB,OAAOE,GAAG;QACZ;QACA,OAAOA,GAAG,GAAG,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,cAAc,GAAGA,CAAA,KAAM;IAC3B;EAAA,CACD;EAED,oBACET,OAAA;IAAKU,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAC/BX,OAAA,CAACF,WAAW;MACVc,KAAK,EAAET,QAAS;MAChBU,UAAU,EAAEJ,cAAe;MAC3BK,UAAU,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAChB,EAAA,CA/BQD,OAAO;AAAAkB,EAAA,GAAPlB,OAAO;AAiChB,eAAeA,OAAO;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}